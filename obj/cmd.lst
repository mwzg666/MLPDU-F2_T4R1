C251 COMPILER V5.60.0,  cmd                                                                13/11/24  15:09:02  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE cmd
OBJECT MODULE PLACED IN .\obj\cmd.obj
COMPILER INVOKED BY: D:\KeilMDK\C251\BIN\C251.EXE MwPro\cmd.c XSMALL INTR2 BROWSE INCDIR(.\Hardware\Usart;.\USER;.\Hardw
                    -are\TIM;.\Hardware\I2C;.\Hardware\mcp4725;.\Ads1110;.\MwPro) DEBUG PRINT(.\obj\cmd.lst) OBJECT(.\obj\cmd.obj) 

stmt  level    source

    1          #include "main.h"
    2          #include "uart.h"
    3          #include "MwPro.h"
    4          #include "cmd.h"
    5          #include "i2c.h"
    6          #include "mcp4725.h"
    7          #include "ads1110.h"
    8          
    9          
   10          extern const BYTE VERSION[];
   11          extern alt_u8 g_Output[];
   12          extern alt_u8 g_OutChannelLight[];
   13          
   14          extern DWORD Cps[];
   15          
   16          BYTE g_CrcFlag = 0;
   17          
   18          WORD g_CommIdleTime = 0;
   19          
   20          //UART_DATA xdata g_UartData[1];
   21          
   22          
   23          
   24          // 51单片机是大端的，通过结构体发送的数据要转换为小端
   25          DWORD DwordToSmall(DWORD dat)
   26          {
   27   1          BYTE buf[4];
   28   1          BYTE t;
   29   1          DWORD ret;
   30   1          
   31   1          memcpy(buf, &dat, 4);
   32   1          t = buf[3];
   33   1          buf[3] = buf[0];
   34   1          buf[0] = t;
   35   1          t = buf[2];
   36   1          buf[2] = buf[1];
   37   1          buf[1] = t;
   38   1      
   39   1          memcpy(&ret, buf, 4);
   40   1          return ret;
   41   1      }
   42          
   43          
   44          WORD WordToSmall(WORD dat)
   45          {
   46   1          BYTE buf[2];
   47   1          BYTE t;
   48   1          WORD ret;
   49   1          
   50   1          memcpy(buf, &dat, 2);
   51   1          t = buf[1];
   52   1          buf[1] = buf[0];
   53   1          buf[0] = t;
   54   1          
   55   1          memcpy(&ret, buf, 2);
   56   1          return ret;
   57   1      }
   58          
C251 COMPILER V5.60.0,  cmd                                                                13/11/24  15:09:02  PAGE 2   

   59          BYTE ByteToSmall(BYTE dat)
   60          {
   61   1          char buf[8];
   62   1          BYTE t,i,j;
   63   1          BYTE ret;
   64   1          
   65   1          memcpy(buf, &dat, 8);
   66   1          for(i = 0,j = 7;i < 4;i++,j--)
   67   1          {
   68   2              t = buf[j];
   69   2              buf[j] = buf[i];
   70   2              buf[i] = t;
   71   2          }
   72   1          
   73   1          memcpy(&ret, buf, 8);
   74   1          return ret;
   75   1      }
   76          
   77          
   78          
   79          float FloatToSmall(float dat)
   80          {
   81   1          BYTE buf[4];
   82   1          BYTE t;
   83   1          float ret;
   84   1          
   85   1          memcpy(buf, &dat, 4);
   86   1          t = buf[3];
   87   1          buf[3] = buf[0];
   88   1          buf[0] = t;
   89   1          t = buf[2];
   90   1          buf[2] = buf[1];
   91   1          buf[1] = t;
   92   1      
   93   1          memcpy(&ret, buf, 4);
   94   1          return ret;
   95   1      }
   96          
   97          
   98          
   99          void ClearRecvData(UART_DATA *pUartData)
  100          {
  101   1          memset(pUartData->RecvBuff, 0, MAX_LENGTH);
  102   1          pUartData->RecvLength = 0;
  103   1          pUartData->Timer = 0;
  104   1      }
  105          
  106          bool ValidFrame(UART_DATA *pUartData)
  107          {
  108   1          alt_u8 lcrc;
  109   1          alt_u8 tmp[3] = {0},tmp2[3] = {0};
  110   1          WORD res = 0;
  111   1          FRAME_HEAD FrmHead;
  112   1          memcpy(&FrmHead, pUartData->RecvBuff, sizeof(FRAME_HEAD));
  113   1          
  114   1          //printf("FrmHead.Len = %d\r\n",FrmHead.Len);
  115   1      
  116   1          if (FrmHead.Head != HEAD)
  117   1          {
  118   2              
  119   2              //printf("Head_error!\r\n");
  120   2              return false;
  121   2          }
  122   1      
  123   1          if (pUartData->RecvBuff[pUartData->RecvLength-1] != TAIL)
  124   1          {
C251 COMPILER V5.60.0,  cmd                                                                13/11/24  15:09:02  PAGE 3   

  125   2              //printf("TAIL_error!\r\n");
  126   2              return false;
  127   2          }
  128   1          
  129   1          if (FrmHead.Len != pUartData->RecvLength)
  130   1          {
  131   2              //printf("LEN_error!\r\n");
  132   2              return false;
  133   2          }
  134   1      
  135   1          lcrc = CheckSum(pUartData->RecvBuff,pUartData->RecvLength);
  136   1          
  137   1          sprintf((char *)tmp, "%02X",lcrc);
  138   1      
  139   1          if ( (memcmp(tmp, &pUartData->RecvBuff[pUartData->RecvLength-3], 2) != 0) )
  140   1          {
  141   2              return false;
  142   2          }
  143   1          
  144   1          return true;
  145   1      }
  146          
  147          
  148          void MakeFrame(UART_DATA *pUartData, alt_u8 Addr, alt_u8 Cmd, alt_u8 *dat, alt_u8 length)
  149          {
  150   1          alt_u8 lcrc;
  151   1              
  152   1          FRAME_HEAD FrmHead;
  153   1          FrmHead.Head = HEAD;
  154   1          FrmHead.Len  = length+8;
  155   1          FrmHead.Type = 0;
  156   1          FrmHead.Addr = Addr;
  157   1          FrmHead.Cmd  = Cmd;
  158   1      
  159   1          memcpy(pUartData->SendBuff, &FrmHead, sizeof(FRAME_HEAD));
  160   1          if (length > 0)
  161   1          {
  162   2              memcpy(&pUartData->SendBuff[DAT], dat, length);
  163   2          }
  164   1      
  165   1          lcrc = CheckSum(pUartData->SendBuff,FrmHead.Len);//计算校验和
  166   1          //printf("Send_CRC = %x\r\n",lcrc);
  167   1          //将校验和转换为两个字节的ASCII
  168   1          //memcpy(&pUartData->SendBuff[FrmHead.Len-3],(BYTE*)&lcrc,2);
  169   1          sprintf((char *)&pUartData->SendBuff[FrmHead.Len-3],"%02X",lcrc);
  170   1          //printf("Send_Buff[5] = %x\r\n",pUartData->SendBuff[FrmHead.Len-3]);
  171   1          //printf("Send_Buff[6] = %x\r\n",pUartData->SendBuff[FrmHead.Len-2]);
  172   1          pUartData->SendBuff[FrmHead.Len-1] = TAIL;   
  173   1          pUartData->SendLength = FrmHead.Len;
  174   1      }
  175          
  176          
  177          void SendPcCmd(alt_u8 Addr, alt_u8 Cmd, alt_u8 *dat, alt_u8 length)
  178          {
  179   1          //g_CrcFlag = 0;
  180   1          MakeFrame(&g_UartData[0], Addr, Cmd, dat, length);
  181   1          //DebugMsg("PC<:");
  182   1          //PrintData(g_UartData[0].SendBuff,g_UartData[0].SendLength);
  183   1          Uart1Send(g_UartData[0].SendBuff,(alt_u8)g_UartData[0].SendLength);
  184   1      
  185   1          g_CommIdleTime = 0;
  186   1      }
  187          
  188          bool SendSensorCmd(alt_u8 Addr, alt_u8 Cmd, alt_u8 *Data, alt_u8 length)
  189          {
  190   1      
C251 COMPILER V5.60.0,  cmd                                                                13/11/24  15:09:02  PAGE 4   

  191   1          MakeFrame(&g_UartData[1],Addr, Cmd, Data, length);
  192   1          Uart2Send(g_UartData[1].SendBuff,(u8)g_UartData[1].SendLength);    
  193   1          return WaitSensorAck(Addr, Cmd);
  194   1      }
  195          
  196          // 等待探头的应答
  197          bool WaitSensorAck(alt_u8 Addr, alt_u8 Cmd)
  198          {
  199   1          u8 i = 0;
  200   1          alt_u32 to = SENSOR_CMD_TIMEOUT/10;
  201   1          while(to--)
  202   1          { 
  203   2              
  204   2              if (g_UartData[1].Timer > UART_DATA_TIMEOUT)
  205   2              {
  206   3                  //DebugMsg("Recv Sensor cmd: Addr:%d - Len:%d \r\n", Addr, g_UartData[Addr].RecvLength);
  207   3                  //DebugMsg("<<");
  208   3                  //PrintData(g_UartData[1].RecvBuff ,(alt_u8)g_UartData[1].RecvLength);
  209   3                   
  210   3                  if (ValidFrame(&g_UartData[1]))
  211   3                  {
  212   4                      if (Cmd == g_UartData[1].RecvBuff[CMD])
  213   4                      {
  214   5                          return true; // 成功
  215   5                      }
  216   4                  }
  217   3              }
  218   2              
  219   2              Idle(20); // 20ms
  220   2      
  221   2              //DebugMsg("Wait : %d \r\n ", to);
  222   2         }
  223   1      
  224   1          //DebugMsg("Wait timeout, addr = %d \r\n ", Addr);
  225   1      
  226   1          return false;
  227   1      }
*** WARNING C47 IN LINE 197 OF MwPro\cmd.c: 'Addr': unreferenced parameter
  228          
  229          
  230          
  231          bool HndPcFrame()
  232          {
  233   1          bool ret = false;
  234   1          if (ValidFrame(&g_UartData[0]))
  235   1          {
  236   2              //printf("CMD_OK!\r\n");
  237   2              ret = HndPcCmd();
  238   2          }
  239   1          ClearRecvData(&g_UartData[0]);
  240   1          return ret;
  241   1      }
  242          
  243          
  244          bool Out4_20ma(BYTE index, BYTE val)
  245          {
  246   1          WORD v = val*100;
  247   1      
  248   1          switch(index)
  249   1          { 
  250   2              case 1:  MCP4725_OutVol(MCP4725_AV_ADDR, v); break;
  251   2              case 2:  MCP4725_OutVol(MCP4725_BH_ADDR, v); break; 
  252   2              //case 1:  MCP4725_OutVol(MCP4725_BL_ADDR, v); break;
  253   2              //case 2:  MCP4725_OutVol(MCP4725_HV_ADDR, v); break; 
  254   2          }
  255   1      
C251 COMPILER V5.60.0,  cmd                                                                13/11/24  15:09:02  PAGE 5   

  256   1          SendPcCmd(0, CMD_OUT_4_20MA, NULL, 0);
  257   1          return true;
  258   1      }
  259          
  260          
  261          bool Read4_20ma()
  262          {
  263   1          BYTE ret = 0;
  264   1          int Voltage = 0;
  265   1          GetAds1110(I2C_4_20MA_IN, ADS110_4_20mA);
  266   1      
  267   1          ret = (BYTE)(Voltage/100);
  268   1          SendPcCmd(0,CMD_GET_4_20MA, &ret, 1);
  269   1          return true;
  270   1      }
  271          
  272          
  273          bool ReadBatVol()
  274          {
  275   1          BAT_INFO bi;
  276   1          int Voltage = 0;
  277   1          GetAds1110(I2C_BAT_VOL, ADS110_BAT_VOL);
  278   1      
  279   1          bi.Vol = (WORD)Voltage;
  280   1          bi.Vol = WordToSmall(bi.Vol);
  281   1          bi.Charging = (BAT_CHARGE() != 0);
  282   1          SendPcCmd(0,CMD_BATTERY, (BYTE *)&bi, 3);
  283   1          return true;
  284   1      }
  285          
  286          
  287          bool HndPcCmd()
  288          {
  289   1          bool ret = false;
  290   1          FRAME_HEAD FrmHead;
  291   1          memcpy(&FrmHead, g_UartData[0].RecvBuff, sizeof(FRAME_HEAD));
  292   1          switch(FrmHead.Cmd)
  293   1          {
  294   2              // Dev cmd
  295   2              case CMD_SOUND:         ret = SoundCtl(g_UartData[0].RecvBuff[DAT]); break;
  296   2              case CMD_LED:           ret = LedCtl(&g_UartData[0].RecvBuff[DAT]);    break;
  297   2              case CMD_OUT_4_20MA:    ret = Out4_20ma(g_UartData[0].RecvBuff[DAT], g_UartData[0].RecvBuff[DAT+1
             -]);    break;
  298   2              case CMD_GET_4_20MA:    ret = Read4_20ma();        break;
  299   2              case CMD_VERSION:       ret = DevVer(FrmHead.Addr);  break;
  300   2              case CMD_BATTERY:       ret = ReadBatVol();        break;
  301   2              //case CMD_CHANNEL_ALMLIGHT:  ret =  ChannelAlmLightClt(&g_UartData[0].RecvBuff[DAT]);break;
  302   2              
  303   2              // Sensor cmd
  304   2              case CMD_DEV_CON:        ret = ConnectSensor(FrmHead.Addr);    break;
  305   2              case CMD_READ_DOSE:      ret = ReadDoseRate(FrmHead.Addr);     break;
  306   2              case CMD_READ_ALARM_PARA:     ret = ReadAlarmParam(FrmHead.Addr);    break;
  307   2              case CMD_WRITE_ALARM_PARA_B:  ret = WriteAlarmParam(FrmHead.Addr);    break;
  308   2              case CMD_READ_DETER_PARA_R:   ret = ReadSensorParam(FrmHead.Addr);   break;
  309   2              case CMD_WRITE_DETER_PARA_W:  ret = WriteSensorParam(FrmHead.Addr);   break;
  310   2      
  311   2              default: ret = FrameRevert(&FrmHead);   break;
  312   2          }
  313   1      
  314   1          return ret;
  315   1      }
  316          
  317          bool FrameRevert(FRAME_HEAD *fres)
  318          {
  319   1          bool ret = false;
  320   1          if (SendSensorCmd(fres->Addr ,fres->Cmd , &g_UartData[0].RecvBuff[DAT], (alt_u8)(fres->Len-8)))
C251 COMPILER V5.60.0,  cmd                                                                13/11/24  15:09:02  PAGE 6   

  321   1          {
  322   2              ret = true;
  323   2              SendPcCmd(fres->Addr, fres->Cmd, &g_UartData[1].RecvBuff[DAT], (alt_u8)(g_UartData[1].RecvBuff[LE
             -N]-8 ));
  324   2          
  325   2          }
  326   1          ClearRecvData(&g_UartData[1]);
  327   1          return ret; 
  328   1      }
  329          
  330          bool ConnectSensor(alt_u8 Addr)
  331          {
  332   1          bool ret = false;
  333   1          if (SendSensorCmd(Addr,CMD_DEV_CON , NULL, 0))
  334   1          {
  335   2              ret = true;
  336   2              SendPcCmd(Addr, CMD_DEV_CON, NULL, 0);
  337   2          }
  338   1          ClearRecvData(&g_UartData[1]);
  339   1          
  340   1          return ret;    
  341   1      }
  342          
  343          bool ReadDoseRate(alt_u8 Addr)
  344          {
  345   1          bool ret = false;
  346   1          
  347   1          HOST_COUNT_PULSE HostDose;
  348   1          //SENSOR_DOSERATE  SensorDose;
  349   1          
  350   1          if (SendSensorCmd(Addr,CMD_READ_DOSE , NULL, 0))
  351   1          {
  352   2              #if 0
                       memcpy(&SensorDose, &g_UartData[1].RecvBuff[DAT], sizeof(SENSOR_DOSERATE));
                       HostDose.DOSE_RATE = SensorDose.DoseRate;
                       HostDose.ACC_DOSE_RATE  = SensorDose.Dose;
                       HostDose.ALARM_STATUS.ByteWhole  = SensorDose.State;
                       #endif
  358   2              memcpy(&HostDose, &g_UartData[1].RecvBuff[DAT], sizeof(HOST_COUNT_PULSE));
  359   2      
  360   2              ret = true;
  361   2              SendPcCmd(Addr, CMD_READ_DOSE, (alt_u8 *)&HostDose, sizeof(HOST_COUNT_PULSE));
  362   2              }
  363   1          ClearRecvData(&g_UartData[1]);
  364   1          return ret;    
  365   1      }
  366          
  367          bool ReadAlarmParam(alt_u8 Addr)
  368          {
  369   1          bool ret = false;
  370   1          
  371   1          HOST_ALRAM_PARA HostAlarm;
  372   1          SENSOR_ALARM  SensorAlarm;
  373   1          
  374   1          if (SendSensorCmd(Addr,CMD_READ_ALARM_PARA , NULL, 0))
  375   1          {
  376   2              memset(&HostAlarm, 0, sizeof(HOST_ALRAM_PARA));
  377   2              memcpy(&SensorAlarm, &g_UartData[1].RecvBuff[DAT], sizeof(SENSOR_ALARM));
  378   2              HostAlarm.DOSE_RATE_ALARM_1 = SensorAlarm.DoseRatePreAlarm;
  379   2              HostAlarm.DOSE_RATE_ALARM_2 = SensorAlarm.DoseRateAlarm;
  380   2              HostAlarm.CUM_DOSE_RATE_ALARM_1 = SensorAlarm.DosePreAlarm;
  381   2              HostAlarm.CUM_DOSE_RATE_ALARM_2 = SensorAlarm.DoseAlarm;
  382   2      
  383   2              ret = true;
  384   2              SendPcCmd(Addr, CMD_READ_ALARM_PARA, (alt_u8 *)&HostAlarm, sizeof(HOST_ALRAM_PARA));
  385   2           }
C251 COMPILER V5.60.0,  cmd                                                                13/11/24  15:09:02  PAGE 7   

  386   1      
  387   1          ClearRecvData(&g_UartData[1]);
  388   1          return ret;    
  389   1      }
  390          
  391          
  392          bool WriteAlarmParam(alt_u8 Addr)
  393          {
  394   1          bool ret = false;
  395   1          
  396   1          HOST_ALRAM_PARA HostAlarm;
  397   1          SENSOR_ALARM  SensorAlarm;
  398   1      
  399   1          memset(&SensorAlarm, 0, sizeof(SENSOR_ALARM));
  400   1          memcpy(&HostAlarm, &g_UartData[0].RecvBuff[DAT], sizeof(HOST_ALRAM_PARA));
  401   1          
  402   1          SensorAlarm.DoseRatePreAlarm = HostAlarm.DOSE_RATE_ALARM_1;
  403   1          SensorAlarm.DoseRateAlarm    = HostAlarm.DOSE_RATE_ALARM_2;
  404   1          SensorAlarm.DosePreAlarm     = HostAlarm.CUM_DOSE_RATE_ALARM_1;
  405   1          SensorAlarm.DoseAlarm        = HostAlarm.CUM_DOSE_RATE_ALARM_2;
  406   1              
  407   1          if (SendSensorCmd(Addr,CMD_WRITE_ALARM_PARA_B , (alt_u8 *)&SensorAlarm, sizeof(SENSOR_ALARM)))
  408   1          {
  409   2                  SendPcCmd(Addr, CMD_WRITE_ALARM_PARA_B, NULL, 0);
  410   2                  ret = true;
  411   2          }
  412   1          ClearRecvData(&g_UartData[1]);
  413   1          
  414   1          return ret;
  415   1      }
  416          
  417          
  418          bool ReadSensorParam(alt_u8 Addr)
  419          {
  420   1          bool ret = false;
  421   1          
  422   1          HOST_SENSOR_PARAM HostParam;
  423   1          SENSOR_PARAM      SensorParam;
  424   1          char temp[5] = {0};
  425   1          
  426   1          if (SendSensorCmd(Addr,CMD_READ_DETER_PARA_R , NULL, 0))
  427   1          {
  428   2              memset(&HostParam, 0, sizeof(HOST_SENSOR_PARAM));
  429   2              memcpy(&SensorParam, &g_UartData[1].RecvBuff[DAT], sizeof(SENSOR_PARAM));
  430   2      
  431   2              HostParam.LOW_REVISE_COE_A = SensorParam.Canshu1;
  432   2              //HostParam.LOW_REVISE_COE_A = FloatToSmall(HostParam.LOW_REVISE_COE_A);
  433   2              HostParam.LOW_REVISE_COE_B = SensorParam.Canshu2;
  434   2              //HostParam.LOW_REVISE_COE_B = FloatToSmall(HostParam.LOW_REVISE_COE_B);
  435   2              memcpy(temp, SensorParam.yuzhi1, 4);
  436   2              HostParam.DET_THR_1 = atoi(temp);
  437   2              HostParam.DET_THR_1 = DwordToSmall(HostParam.DET_THR_1);
  438   2              memcpy(temp, SensorParam.yuzhi2, 4);
  439   2              HostParam.DET_THR_2 = atoi(temp);
  440   2              HostParam.DET_THR_2 = DwordToSmall(HostParam.DET_THR_2);
  441   2              memcpy(temp, SensorParam.PingHuaShiJian, 4);
  442   2              HostParam.DET_TIME  = atoi(temp);
  443   2              HostParam.DET_TIME = DwordToSmall(HostParam.DET_TIME);
  444   2              //printf("THR_1 = %d\r\n", HostParam.DET_THR_1);
  445   2              //printf("THR_2 = %d\r\n", HostParam.DET_THR_2);
  446   2      
  447   2              SendPcCmd(Addr, CMD_READ_DETER_PARA_R, (alt_u8 *)&HostParam, sizeof(HOST_SENSOR_PARAM));
  448   2              ret = true;
  449   2      
  450   2          }
  451   1          ClearRecvData(&g_UartData[1]);
C251 COMPILER V5.60.0,  cmd                                                                13/11/24  15:09:02  PAGE 8   

  452   1          return ret;    
  453   1      }
  454          
  455          
  456          
  457          bool WriteSensorParam(alt_u8 Addr)
  458          {
  459   1          bool ret = false;
  460   1          
  461   1          HOST_SENSOR_PARAM HostParam;
  462   1          SENSOR_PARAM      SensorParam;
  463   1          char temp[5] = {0};
  464   1      
  465   1          memset(&SensorParam, 0, sizeof(SENSOR_PARAM));
  466   1          memcpy(&HostParam, &g_UartData[0].RecvBuff[DAT], sizeof(HOST_SENSOR_PARAM));
  467   1          
  468   1          SensorParam.Canshu1 = HostParam.LOW_REVISE_COE_A;
  469   1          SensorParam.Canshu2 = HostParam.LOW_REVISE_COE_B;
  470   1          HostParam.DET_THR_1 = DwordToSmall(HostParam.DET_THR_1);
  471   1          sprintf(temp, "%04u", (unsigned int)HostParam.DET_THR_1);
  472   1          memcpy(SensorParam.yuzhi1, temp, 4);
  473   1          
  474   1          HostParam.DET_THR_2 = DwordToSmall(HostParam.DET_THR_2);
  475   1          sprintf(temp, "%04u", (unsigned int)HostParam.DET_THR_2);
  476   1          memcpy(SensorParam.yuzhi2, temp, 4);
  477   1          
  478   1          HostParam.DET_TIME = DwordToSmall(HostParam.DET_TIME);
  479   1          sprintf(temp, "%04u", (unsigned int)HostParam.DET_TIME);
  480   1          memcpy(SensorParam.PingHuaShiJian, temp, 4);
  481   1          
  482   1          if (SendSensorCmd(Addr,CMD_WRITE_DETER_PARA_W , (alt_u8 *)&SensorParam, sizeof(SENSOR_PARAM)))
  483   1          {
  484   2      
  485   2              SendPcCmd(Addr, CMD_WRITE_DETER_PARA_W, NULL, 0);
  486   2              ret = true;
  487   2      
  488   2          }
  489   1          ClearRecvData(&g_UartData[1]);
  490   1          return ret;   
  491   1      }
  492          
  493          bool SoundCtl(alt_u8 Ctl)
  494          {
  495   1          if (Ctl == 0xAA)
  496   1          {
  497   2              RELAY_1(1);      // 远程报警灯
  498   2              g_Output[ALARM_SOUND] = 2;
  499   2          }
  500   1          else
  501   1          {
  502   2              RELAY_1(0);    
  503   2              g_Output[ALARM_SOUND] = 0;
  504   2          }
  505   1          SendPcCmd(0, CMD_SOUND, NULL, 0);
  506   1          return true;
  507   1      }
  508          
  509          bool LedCtl(alt_u8 *led)
  510          {
  511   1          memcpy(g_Output, led, OUT_IO_COUNT-1);  // 报警音不在这里控制
  512   1      
  513   1          //根据报警灯控制继电器输出
  514   1          if (g_Output[LIGHT_YELLOW])
  515   1          {
  516   2              RELAY_3(1); 
  517   2          }
C251 COMPILER V5.60.0,  cmd                                                                13/11/24  15:09:02  PAGE 9   

  518   1          else
  519   1          {
  520   2              RELAY_3(0); 
  521   2      
  522   2          }
  523   1      
  524   1          if (g_Output[LIGHT_RED])
  525   1          {
  526   2              RELAY_4(1); 
  527   2          }
  528   1          else
  529   1          {
  530   2              RELAY_4(0); 
  531   2          }
  532   1      
  533   1          SendPcCmd(0, CMD_LED, NULL, 0);
  534   1          return true;
  535   1      }
  536          
  537          bool ChannelAlmLightClt(alt_u8 *Light)
  538          {
  539   1          memcpy(g_OutChannelLight, Light, OUT_Channel_COUNT); 
  540   1          if(g_OutChannelLight[LIGHT_OUT1])
  541   1          {
  542   2              ALMOUT_1(1);
  543   2      
  544   2          }
  545   1          else
  546   1          {
  547   2              ALMOUT_1(0);
  548   2      
  549   2          }
  550   1      
  551   1          if(g_OutChannelLight[LIGHT_OUT2])
  552   1          {
  553   2              ALMOUT_2(1);
  554   2      
  555   2          }
  556   1          else
  557   1          {
  558   2              ALMOUT_2(0);
  559   2      
  560   2          }
  561   1      
  562   1          if(g_OutChannelLight[LIGHT_OUT3])
  563   1          {
  564   2              ALMOUT_3(1);
  565   2      
  566   2          }
  567   1          else
  568   1          {
  569   2              ALMOUT_3(0);
  570   2      
  571   2          }
  572   1          if(g_OutChannelLight[LIGHT_OUT4])
  573   1          {
  574   2              ALMOUT_4(1);
  575   2      
  576   2          }
  577   1          else
  578   1          {
  579   2              ALMOUT_4(0);
  580   2      
  581   2          }
  582   1          
  583   1          SendPcCmd(0, CMD_CHANNEL_ALMLIGHT, NULL, 0);
C251 COMPILER V5.60.0,  cmd                                                                13/11/24  15:09:02  PAGE 10  

  584   1          return true;
  585   1      
  586   1          
  587   1      }
  588          
  589          bool DevVer(alt_u8 Addr)
  590          {
  591   1          char buf[7] = {0};
  592   1      
  593   1          if (Addr == 0)
  594   1          {
  595   2              memcpy(buf, VERSION, 6);
  596   2          }
  597   1          else
  598   1          {
  599   2              if (SendSensorCmd(Addr,CMD_VERSION , NULL, 0))
  600   2              {
  601   3      
  602   3                  memcpy(buf, &g_UartData[1].RecvBuff[DAT], 6);
  603   3                  ClearRecvData(&g_UartData[1]);
  604   3              }
  605   2              else
  606   2              {
  607   3                  return false;
  608   3              }
  609   2          }
  610   1      
  611   1          SendPcCmd(Addr, CMD_VERSION, (alt_u8 *)buf, 6);
  612   1          return true;
  613   1      }
  614          
  615          
  616          #if 1
  617          /************************************************************
  618          *函数名：CheckSum
  619          *功  能：计算校验和
  620          *参  数：   alt_u8 *dataBuf    缓存接收的字符数组
  621          *参  数：   alt_u16 len   命令长度
  622          *返  回： 校验和
  623          *报文长度、设备类型、通道号、指令、信息体的和，然后上半字节和下半字节各形成一个ASCII码
  624          *作者：yaominggang
  625          ***************************************************************/
  626          alt_u8 CheckSum(alt_u8 *dataBuf,alt_u16 len)
  627          {
  628   1               alt_u8 i=0;
  629   1               alt_u8 lchecksum=0;
  630   1               lchecksum = 0;
  631   1           for(i=1;i<len-3;i++)//不计算其实标志位，和两个字节校验和，以及结束符
  632   1           {
  633   2               lchecksum += dataBuf[i];
  634   2           }
  635   1           return lchecksum;
  636   1      }
  637          
  638          #endif
  639          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      4148     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
C251 COMPILER V5.60.0,  cmd                                                                13/11/24  15:09:02  PAGE 11  

  edata size           =         3        357
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        50     ------
End of Module Information.


C251 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
