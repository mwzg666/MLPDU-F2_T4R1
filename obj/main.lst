C251 COMPILER V5.60.0,  main                                                               11/11/24  09:33:05  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE main
OBJECT MODULE PLACED IN .\obj\main.obj
COMPILER INVOKED BY: D:\KeilMDK\C251\BIN\C251.EXE USER\main.c XSMALL INTR2 BROWSE INCDIR(.\Hardware\Usart;.\USER;.\Hardw
                    -are\TIM;.\Hardware\I2C;.\Hardware\mcp4725;.\Ads1110;.\MwPro) DEBUG PRINT(.\obj\main.lst) OBJECT(.\obj\main.obj) 

stmt  level    source

    1          #include "main.h"
    2          #include "time.h"
    3          #include "uart.h"
    4          #include "i2c.h"
    5          #include "Ads1110.h"
    6          #include "Cmd.h"
    7          #include "mcp4725.h"
    8          #include "MwPro.h"
    9          
   10          const BYTE VERSION[8] = "V1.0.2";
   11          BYTE xdata StrTmp[64] = {0};
   12          
   13          alt_u32 gIdleTime;
   14          alt_u32 gTask1sTime = 0;
   15          #if 0
               alt_u8 g_Output[OUT_IO_COUNT]      = {1,0,0,0,0,0};   // …œµÁ¬Ãµ∆¡¡ // 
               alt_u8 g_OutStatus[OUT_IO_COUNT]   = {0,0,0,0,0,0};
               #else
   19          alt_u8 g_Output[OUT_IO_COUNT]      = {1,0,0,0,0,0};   // …œµÁ¬Ãµ∆¡¡ // 
   20          alt_u8 g_OutStatus[OUT_IO_COUNT]   = {0,0,0,0,0,0};
   21          
   22          alt_u8 g_OutChannelLight[OUT_Channel_COUNT]      = {0,0,0,0};   // ∏˜ÃΩÕ∑±®æØµ∆ // 
   23          alt_u8 g_OutChannelStatus[OUT_Channel_COUNT]   = {0,0,0,0};
   24          
   25          #endif
   26          
   27          alt_u16 gRunTime = 0;
   28          
   29          alt_u8 g_Key_Confrom  = 0; 
   30          alt_u8 g_Key_Power  = 0; 
   31          alt_u8 g_Key_Input  = 0; 
   32          BYTE Input_Status = 0;
   33          
   34          
   35          void DebugMsg(char *msg)
   36          {
   37   1          BYTE len = (BYTE)strlen(msg);
   38   1          //Uart1Send((BYTE *)msg,len);
   39   1      }
   40          
   41          void DebugInt(int msg)
   42          {
   43   1          memset(StrTmp,0,64);
   44   1          sprintf(StrTmp,"%x\r\n",msg);
   45   1          DebugMsg(StrTmp);
   46   1      }
   47          
   48          void DumpCmd(BYTE *dat, BYTE len)
   49          {
   50   1          BYTE i;
   51   1          memset(StrTmp,0,64);
   52   1          for (i=0;i<len;i++)
   53   1          {
   54   2              if (strlen(StrTmp) >= 60)
   55   2              {
   56   3                  break;
   57   3              }
   58   2              sprintf(&StrTmp[i*3], "%02X ", dat[i]);
C251 COMPILER V5.60.0,  main                                                               11/11/24  09:33:05  PAGE 2   

   59   2          }
   60   1          sprintf(&StrTmp[i*3], "\r\n");
   61   1          DebugMsg(StrTmp);
   62   1      }
   63          
   64          
   65          void Error()
   66          {
   67   1          while(1)
   68   1          {
   69   2              RUN_LED(1);
   70   2              delay_ms(50);
   71   2              RUN_LED(0);
   72   2              delay_ms(50);
   73   2          }
   74   1          
   75   1      }
   76          
   77          // ∞Â‘ÿ÷∏ æµ∆
   78          void RunLed(u16 dt)
   79          {   
   80   1          static u16 tm = 0;
   81   1          u16 to = 3000;
   82   1          tm += dt;
   83   1      
   84   1          if (tm > to)
   85   1          {
   86   2              tm = 0;
   87   2              RUN_LED(0);
   88   2          }
   89   1          else if (tm > (to-100))
   90   1          {
   91   2              RUN_LED(1);
   92   2          }
   93   1      }
   94          
   95          void Idle(alt_u32 time)
   96          {
   97   1          gIdleTime = 0;
   98   1          
   99   1          while(gIdleTime < time)
  100   1          {
  101   2              TimerTask();
  102   2              HndInput();
  103   2          }
  104   1      }
  105          
  106          void SysInit()
  107          {
  108   1          HIRCCR = 0x80;           // ∆Ù∂Øƒ⁄≤ø∏ﬂÀŸIRC
  109   1          while(!(HIRCCR & 1));
  110   1          CLKSEL = 0;              
  111   1      }
  112          
  113          void IoInit()
  114          {
  115   1          EAXFR = 1;
  116   1          WTST = 0;                                           //…Ë÷√≥Ã–Ú÷∏¡Ó—” ±≤Œ ˝£¨∏≥÷µŒ™0ø…Ω´CPU÷¥––÷∏¡ÓµƒÀ
             -Ÿ∂»…Ë÷√Œ™◊ÓøÏ
  117   1      
  118   1          P0M1 = 0x00;   P0M0 = 0xDF;                         // Õ∆ÕÏ ‰≥ˆ
  119   1          P1M1 = 0x08;   P1M0 = 0x00;                         //…Ë÷√Œ™◊ºÀ´œÚø⁄//(1<<3)
  120   1          P2M1 = 0x06;   P2M0 = 0x79;                        // P2.2 Õ∆ÕÏ ‰≥ˆ
  121   1          P3M1 = 0x00;   P3M0 |= (1<<5);                      //…Ë÷√Œ™◊ºÀ´œÚø⁄
  122   1          P4M1 = 0x02;   P4M0 = 0x1C;                        //…Ë÷√Œ™◊ºÀ´œÚø⁄  
  123   1          P5M1 = 0x05;   P5M0 |= (1<<1);                      //…Ë÷√Œ™◊ºÀ´œÚø⁄
C251 COMPILER V5.60.0,  main                                                               11/11/24  09:33:05  PAGE 3   

  124   1      }
  125          
  126          
  127          void MainTask()
  128          {
  129   1          // µ»¥˝PC√¸¡Ó
  130   1          if (g_UartData[0].Timer > UART_DATA_TIMEOUT)
  131   1          {
  132   2              //DebugMsg("Recv pc frame Len: %d \r\n", g_UartData[0].RecvLength);
  133   2              DebugMsg("PC>:\n");
  134   2              PrintData((alt_u8 *)g_UartData[0].RecvBuff, (alt_u8)(g_UartData[0].RecvLength));
  135   2              HndPcFrame();
  136   2          }
  137   1      }
  138          
  139          void TestRs485()
  140          {
  141   1          if (g_UartData[1].Timer > UART_DATA_TIMEOUT)
  142   1          {
  143   2              //DebugMsg("Recv pc frame Len: %d \r\n", g_UartData[0].RecvLength);
  144   2              DebugMsg("PC>:");
  145   2              PrintData(g_UartData[1].RecvBuff, (alt_u8)(g_UartData[1].RecvLength));
  146   2              Clear_Uart2_Buf();
  147   2              //HndPcFrame();
  148   2          }
  149   1      }
  150          
  151          
  152          void OutCtl(alt_u8 id, alt_u8 st)
  153          {
  154   1          if (g_OutStatus[id] == st)
  155   1          {
  156   2              return;
  157   2          }
  158   1      
  159   1          g_OutStatus[id] = st;
  160   1          
  161   1          switch(id)
  162   1          {
  163   2              case LIGHT_YELLOW: 
  164   2              {
  165   3                  (st)? YEL_LIGHT(1):YEL_LIGHT(0);   
  166   3                  break;
  167   3              }
  168   2              
  169   2              case LIGHT_RED:    
  170   2              {
  171   3                  (st)? RED_LIGHT(1):RED_LIGHT(0);    
  172   3                  break;
  173   3              }
  174   2              
  175   2              case LED_RED:      (st)? RED_LED(1):RED_LED(0);        break;
  176   2              case LED_GREEN:    (st)? GRE_LED(1):GRE_LED(0);        break;
  177   2              
  178   2              case LED_YELLOW:    // π ’œ
  179   2              {
  180   3                  (st)? YEL_LED(1):YEL_LED(0); 
  181   3                  (st)? RELAY_2(1):RELAY_2(0); 
  182   3                  //RELAY_2(st);
  183   3                  break;
  184   3              }
  185   2              
  186   2              case ALARM_SOUND:  (st)? ALARM(1):ALARM(0);       break;
  187   2          }
  188   1      
  189   1          
C251 COMPILER V5.60.0,  main                                                               11/11/24  09:33:05  PAGE 4   

  190   1      }
  191          
  192          void OutChannelLightCtl(alt_u8 id, alt_u8 st)
  193          {
  194   1           if (g_OutChannelStatus[id] == st)
  195   1          {
  196   2              return;
  197   2          }
  198   1      
  199   1          g_OutChannelStatus[id] = st;
  200   1          
  201   1          switch(id)
  202   1          {
  203   2              case LIGHT_OUT1: 
  204   2              {
  205   3                  (st)? ALMOUT_1(1):ALMOUT_1(0);   
  206   3                  break;
  207   3              }
  208   2              
  209   2              case LIGHT_OUT2: 
  210   2              {
  211   3                  (st)? ALMOUT_2(1):ALMOUT_2(0);   
  212   3                  break;
  213   3              }
  214   2              case LIGHT_OUT3: 
  215   2              {
  216   3                  (st)? ALMOUT_3(1):ALMOUT_3(0);   
  217   3                  break;
  218   3              }
  219   2              
  220   2              case LIGHT_OUT4: 
  221   2              {
  222   3                  (st)? ALMOUT_4(1):ALMOUT_4(0);   
  223   3                  break;
  224   3              }
  225   2          }
  226   1      }
  227          
  228          
  229          void OutFlash(alt_u8 id)
  230          {
  231   1          static alt_u16 OutTimer[OUT_IO_COUNT] = {0,0,0,0,0,0};
  232   1          //static alt_u16 OutChannelTimer[OUT_Channel_COUNT] = {0,0,0,0};
  233   1          if (OutTimer[id] ++ > LED_FLASH_TIME/20)
  234   1          {
  235   2              OutTimer[id] = 0;
  236   2              if (g_OutStatus[id] == 1)
  237   2              {
  238   3                  OutCtl(id, 0);
  239   3              }
  240   2              else
  241   2              {
  242   3                  OutCtl(id, 1);
  243   3              }
  244   2          }
  245   1          #if 0
                   if (OutChannelTimer[id] ++ > LED_FLASH_TIME/20)
                   {
                       OutChannelTimer[id] = 0;
                       if (g_OutChannelStatus[id] == 1)
                       {
                           OutChannelLightCtl(id, 0);
                       }
                       else
                       {
                           OutChannelLightCtl(id, 1);
C251 COMPILER V5.60.0,  main                                                               11/11/24  09:33:05  PAGE 5   

                       }
                   }
                   #endif
  259   1      }
  260          
  261          
  262          void IoCtlTask()
  263          {
  264   1          alt_u8 i;
  265   1          for (i=0;i<OUT_IO_COUNT;i++)
  266   1          {
  267   2              if (g_Output[i] == 2)
  268   2              {
  269   3                  OutFlash(i);
  270   3              }
  271   2              else
  272   2              {
  273   3                  OutCtl(i, g_Output[i]);
  274   3              }
  275   2          }
  276   1          #if 0
                   for (i=0;i<OUT_Channel_COUNT;i++)
                   {
                       if (g_OutChannelLight[i] == 2)
                       {
                           OutFlash(i);
                       }
                       else
                       {
                           OutChannelLightCtl(i, g_OutChannelLight[i]);
                       }
                   }
                   #endif
  289   1      }
  290          
  291          void PowerOff()
  292          {
  293   1          GRE_LED(0);
  294   1          YEL_LED(0);
  295   1          RED_LED(0);
  296   1          RED_LIGHT(0);
  297   1          YEL_LIGHT(0);
  298   1          ALARM(0);
  299   1          RELAY_1(0);
  300   1          RELAY_2(0);
  301   1          RELAY_3(0);
  302   1          RELAY_4(0);
  303   1          IPC_PWR_ON(0);
  304   1          PW_MAIN(0);    //πÿ±’øÿ÷∆∞ÂµÁ‘¥
  305   1      
  306   1          while(1)
  307   1          {
  308   2              ;
  309   2          }
  310   1      }
  311          
  312          
  313          void WaitCommIdle()
  314          {
  315   1          while (g_CommIdleTime < 200)
  316   1          {
  317   2              Idle(10);
  318   2          }
  319   1      }
  320          
  321          void LedInit()
C251 COMPILER V5.60.0,  main                                                               11/11/24  09:33:05  PAGE 6   

  322          {
  323   1          // ≥ı º◊¥Ã¨∂ºŒ™0
  324   1      
  325   1          // ÷∏ æµ∆
  326   1          GRE_LED(0);
  327   1          YEL_LED(0);
  328   1          RED_LED(0);
  329   1          
  330   1          YEL_LIGHT(0);   // ª∆µ∆
  331   1          RED_LIGHT(0);   // ∫Ïµ∆
  332   1          
  333   1          //LEDF(0);   
  334   1          //LEDM(0);      
  335   1          ALARM(0);       
  336   1      
  337   1          ALMOUT_1(0);
  338   1          ALMOUT_2(0);
  339   1          ALMOUT_3(0);
  340   1          ALMOUT_4(0);
  341   1      
  342   1          RELAY_1(0);
  343   1          RELAY_2(0);
  344   1          RELAY_3(0);
  345   1          RELAY_4(0);
  346   1          
  347   1      }
  348          
  349          
  350          
  351          void HndInput()
  352          {
  353   1          static alt_u8 PwrHis = POWER_OFF;   
  354   1          static BYTE  StHis = 0x01;
  355   1          
  356   1          BYTE s;
  357   1      
  358   1          // ±®æØ»∑»œ
  359   1          alt_u8 key = GetKey();
  360   1          if (key == KEY_ALM_CFM)
  361   1          {
  362   2              //DebugMsg("KEY_ALM_CFM \r\n");
  363   2              //WaitCommIdle();
  364   2              //SendPcCmd(0, CMD_CERTAINKEY, NULL, 0);
  365   2              g_Key_Confrom = 1;
  366   2          }
  367   1      
  368   1      
  369   1          Input_Status = GetStatus();
  370   1          if (Input_Status != 0xFF)
  371   1          {
  372   2              s = (Input_Status ^ StHis);
  373   2              if (s & 1)   // ø™πÿª˙
  374   2              {
  375   3                  if (Input_Status & 1)
  376   3                  {
  377   4                      PwrHis = POWER_OFF;
  378   4                      //WaitCommIdle();
  379   4                      //SendPcCmd(0, CMD_POWER, &PwrHis, 1);
  380   4                      g_Key_Power = 1;
  381   4                  }
  382   3                  else
  383   3                  {
  384   4                      IPC_PWR_ON(1);
  385   4                      PwrHis = POWER_ON;
  386   4                      gRunTime = 0;
  387   4                  }
C251 COMPILER V5.60.0,  main                                                               11/11/24  09:33:05  PAGE 7   

  388   3              }
  389   2      
  390   2      //        if (s & 4) //  ‰»Î1
  391   2      //        {
  392   2      //            //WaitCommIdle();
  393   2      //            //SendPcCmd(0, CMD_INPUT, &st, 1);
  394   2      //            g_Key_Input = 1;
  395   2      //        }
  396   2      //
  397   2      //        if (s & 2) //  ‰»Î2
  398   2      //        {
  399   2      //            //WaitCommIdle();
  400   2      //            //SendPcCmd(0, CMD_INPUT, &st, 1);
  401   2      //            g_Key_Input = 1;
  402   2      //        }
  403   2                  
  404   2              StHis = Input_Status;
  405   2          }
  406   1      
  407   1      
  408   1           //—” ±πÿª˙
  409   1          if (PwrHis == POWER_OFF)
  410   1          {
  411   2              if ((PC_STAUTUS() == 0) && (gRunTime >= 5000))
  412   2              {
  413   3                  gRunTime = 0;
  414   3                  //DebugMsg("Power off \r\n");
  415   3                  PowerOff();
  416   3              }
  417   2          }
  418   1      }
  419          
  420          alt_u8 GetKey()
  421          {
  422   1          static alt_u8 key_pressed = 0;
  423   1          
  424   1          // ≤ªƒ‹µ˜”√Idle
  425   1          if (CONFIRM_BUTTON() == 0)
  426   1          {
  427   2              if (key_pressed == 1)
  428   2              {
  429   3                  return 0;
  430   3              }
  431   2              
  432   2              delay_ms(20);
  433   2              if (CONFIRM_BUTTON() == 0)
  434   2              {
  435   3                  key_pressed = 1;
  436   3                  return KEY_ALM_CFM;
  437   3              }
  438   2          }
  439   1          else
  440   1          {
  441   2              key_pressed = 0;
  442   2          }
  443   1          
  444   1          return 0;
  445   1      }
  446          
  447          
  448          BYTE GetStatus()
  449          {
  450   1          //static BYTE his = 0x07;
  451   1          static BYTE his = 0x01;
  452   1          BYTE st = POWER_LOCK(),st2 = 0;
  453   1          //st |= INPUT1_M();
C251 COMPILER V5.60.0,  main                                                               11/11/24  09:33:05  PAGE 8   

  454   1          //st |= INPUT2_M();
  455   1      
  456   1          if (st != his)
  457   1          {
  458   2              delay_ms(50);
  459   2              //st2 = POWER_LOCK();
  460   2              //st2 |= INPUT1_M();
  461   2              //st2 |= INPUT2_M(); 
  462   2              if ( st == POWER_LOCK() )
  463   2              {
  464   3                  his = st;
  465   3                  return st;
  466   3              }
  467   2          }
  468   1      
  469   1          return 0xFF;
  470   1      }
  471          
  472          void PrintData(alt_u8 *pata, alt_u8 len)
  473          {
  474   1          alt_u8 i=0;
  475   1          for (i=0; i<len; i++)
  476   1          {
  477   2              printf("%02X ", pata[i]);
  478   2          }
  479   1          printf("\r\n");
  480   1      }
  481          
  482          
  483          void Task_1s()
  484          {
  485   1          //Rs485Send("123456", 6);
  486   1          //ReadBatVol();
  487   1          //Read4_20ma();
  488   1      }
  489          
  490          void ReportInput()
  491          {
  492   1          BYTE PwOff = POWER_OFF;
  493   1          
  494   1          if (g_CommIdleTime > 300)
  495   1          {
  496   2              if (g_Key_Confrom)
  497   2              {
  498   3                  g_Key_Confrom = 0;
  499   3                  SendPcCmd(0, CMD_CERTAINKEY, NULL, 0);
  500   3                  return;
  501   3              }
  502   2      
  503   2              if (g_Key_Power)
  504   2              {
  505   3                  g_Key_Power = 0;
  506   3                  SendPcCmd(0, CMD_POWER, &PwOff, 1);
  507   3                  return;
  508   3              }
  509   2      
  510   2              if (g_Key_Input)
  511   2              {
  512   3                  g_Key_Input = 0;
  513   3                  SendPcCmd(0, CMD_INPUT, &Input_Status, 1);
  514   3              }
  515   2          }
  516   1      }
  517          
  518          
  519          void main(void)
C251 COMPILER V5.60.0,  main                                                               11/11/24  09:33:05  PAGE 9   

  520          {
  521   1          SysInit();
  522   1          IoInit();
  523   1          PW_MAIN(1);                 // ÷˜µÁ‘¥
  524   1          LedInit();
  525   1          RUN_LED(1);
  526   1         
  527   1          delay_ms(200);
  528   1          
  529   1          Timer0_Init();
  530   1          delay_ms(200);
  531   1          
  532   1          Uart1_Init();
  533   1          delay_ms(200);
  534   1          
  535   1          Uart2_Init();    
  536   1          delay_ms(200);
  537   1      
  538   1          // ¥˝CPUŒ»∂®¡À‘Ÿ∂¡≤Œ ˝
  539   1          delay_ms(500);
  540   1      
  541   1          memset((BYTE *)&g_UartData,0,sizeof(UART_DATA)*2); 
  542   1          delay_ms(200);
  543   1      
  544   1          RUN_LED(0);
  545   1          EA = 1;  //¥Úø™◊‹÷–∂œ
  546   1          
  547   1          WDT_CONTR |= (1<<5) |  7;   // ∆Ù∂Øø™√≈π∑£¨‘º8√Î
  548   1          delay_ms(200);
  549   1          Out4_20ma(1,0);
  550   1          Out4_20ma(2,0);
  551   1      
  552   1          while(1)
  553   1          {
  554   2              TimerTask();
  555   2              HndInput();
  556   2              ReportInput();
  557   2              Uart1Hnd();
  558   2          }
  559   1      }
  560          
  561          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1364     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =        64     ------
  xdata-const size     =    ------     ------
  edata size           =        52          5
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       214     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
